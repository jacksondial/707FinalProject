library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
# Extracting the first Mp1p measurements for each patient to create a subset of "baseline" Mp1p concentrations
new_mp1p_dat_bl = new_mp1p_dat %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_num) %>% # subsetting
dplyr::group_by(PatientNo) %>% # grouping by PatientNo so that the first obs. of each person can be filtered below
dplyr::filter(row_number() == 1) %>% # get the first obs. for each person
dplyr::mutate(logMp1p = log10(Mp1p_num)) %>%  # create log base 10 transformed Mp1p
dplyr::filter(Mp1p_day < 56) # Excluding patients with a first Mp1p measurement on day 56 or later
######################################################################
## Change Log:
# "MP" file name extension This new iteration will be used as the RMD for my Master's Project.
# Version 4 - In this new iteration, I removed code that waas incorrect, I removed comments that were unnecessary and I removed data steps that I didn't need anymore.
# Version 5 - In this new iteration, I removed any data checks or discrepency checks between datasets that are no longer relavant. I also removed any code that isn't needed anymore to produce results based on our current research goals. This includes the spaghetti plots of Mp1p for each treatment arm over time, and any table 1's not stratified by Mp1p
##############################################################################
### -- Grace ----------------------------------------------
# rm(list = ls()) # Clear environment
### Packages ###
library(knitr)
library(kableExtra)
library(readxl)
library(proto)
library(gsubfn)
library(patchwork)
library(lintr)
library(scales)
library(stats)
library(survival)
library(survminer)
library(tikzDevice)
library(GGally)
library(car)
library(heatmapFit)
library(cowplot)
#library(table1)
library(tableone)
library(vioplot)
library(cmprsk)
library(tidyverse)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message = FALSE)
######################################################################
##  Author: tina.davenport@duke.edu
##  Program: SAPRrmdtemplate.rmd
##  Purpose: This program drafts and executes the SAP for a project
##  Input files:  [list data or source files]
##  Output files: SAPRrmdtemplate.docx - Word file of the SAP and report for these analyses
##  Change Log:       (example)
##  02/24/2022 File started
##  02/05/2022 Updated SAP based on feedback from PI
######################################################################
# setwd()
library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
# Baseline demographics and symptoms
base_demohist = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_DEMOHIST.csv") %>%
dplyr::select(patientno, age, sex, ivdu) %>%
dplyr::rename(PatientNo = patientno) # renaming patientno variable
# Baseline lab measurements (including baseline cd4 and fungal count)
base_lab = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_LAB.csv") %>%
dplyr::select(PatientNo, cd4_bl, log10_fungal_count_bl)
# Dataset containing treatment arm
pop_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/POP.csv") %>%
dplyr::select(PatientNo, arm, itt, itt_mod, pp)
# Endpoint dataset
endpoint_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttdeath_2w, evdeath_2w, ttdeath_24w, evdeath_24w, ttirisrelapse_24w, evtypeirisrelapse_24w)
# Endpoint dataset for Aim 3 (Only contains PatientNo and outcome variables for composite of IRIS and relapse)
endpoint_dat_aim3 = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttirisrelapse_24w, evtypeirisrelapse_24w, evtypeirisrelapse_text_24w, evtypeirisrelapse_textdetail_24w, irisrelapse_date)
# Fungal dataset - renaming "patientno" as "PatientNo"
fungal_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/FUNGAL.csv", header = TRUE) %>%
dplyr::rename(PatientNo = patientno)
# New Mp1p dataset - contains 20 new Mp1p values added as of 08/03/2022 and the 32 new values added as of 07/26/2022 which were all missing previously
new_mp1p_dat = read_excel("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/TmAg clearance 20220803.xlsx", sheet = "TmAg", na = "") %>%
data.frame() %>%
dplyr::rename(Mp1p_char = Mp1p.concentration..pg.ml.) %>% # renaming variables
dplyr::rename(Mp1p_day = day) %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_char, Reason.for.NA.TmAg) %>% # subsetting
dplyr::arrange(PatientNo, Mp1p_day, time) # arrange PatientNo by day and time so that day and time are in ascending order
# Extracting the first Mp1p measurements for each patient to create a subset of "baseline" Mp1p concentrations
new_mp1p_dat_bl = new_mp1p_dat %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_num) %>% # subsetting
dplyr::group_by(PatientNo) %>% # grouping by PatientNo so that the first obs. of each person can be filtered below
dplyr::filter(row_number() == 1) %>% # get the first obs. for each person
dplyr::mutate(logMp1p = log10(Mp1p_num)) %>%  # create log base 10 transformed Mp1p
dplyr::filter(Mp1p_day < 56) # Excluding patients with a first Mp1p measurement on day 56 or later
# Baseline demographics and symptoms
base_demohist = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_DEMOHIST.csv") %>%
dplyr::select(patientno, age, sex, ivdu) %>%
dplyr::rename(PatientNo = patientno) # renaming patientno variable
# Baseline lab measurements (including baseline cd4 and fungal count)
base_lab = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_LAB.csv") %>%
dplyr::select(PatientNo, cd4_bl, log10_fungal_count_bl)
# Dataset containing treatment arm
pop_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/POP.csv") %>%
dplyr::select(PatientNo, arm, itt, itt_mod, pp)
# Endpoint dataset
endpoint_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttdeath_2w, evdeath_2w, ttdeath_24w, evdeath_24w, ttirisrelapse_24w, evtypeirisrelapse_24w)
# Endpoint dataset for Aim 3 (Only contains PatientNo and outcome variables for composite of IRIS and relapse)
endpoint_dat_aim3 = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttirisrelapse_24w, evtypeirisrelapse_24w, evtypeirisrelapse_text_24w, evtypeirisrelapse_textdetail_24w, irisrelapse_date)
# Fungal dataset - renaming "patientno" as "PatientNo"
fungal_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/FUNGAL.csv", header = TRUE) %>%
dplyr::rename(PatientNo = patientno)
# New Mp1p dataset - contains 20 new Mp1p values added as of 08/03/2022 and the 32 new values added as of 07/26/2022 which were all missing previously
new_mp1p_dat = read_excel("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/TmAg clearance 20220803.xlsx", sheet = "TmAg", na = "") %>%
data.frame() %>%
dplyr::rename(Mp1p_char = Mp1p.concentration..pg.ml.) %>% # renaming variables
dplyr::rename(Mp1p_day = day) %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_char, Reason.for.NA.TmAg) %>% # subsetting
dplyr::arrange(PatientNo, Mp1p_day, time) # arrange PatientNo by day and time so that day and time are in ascending order
new_mp1p_dat$Mp1p_num = new_mp1p_dat$Mp1p_char # create a new version of Mp1p
# Remove all spaces from Mp1p_conc values to more easily replace undetectable mp1p character values as done below
new_mp1p_dat$Mp1p_num = gsub(" ", "", new_mp1p_dat$Mp1p_num)
## Changing Undetectable values (below 85 or above 1,651,036.15) to 85 and 1,651,036.15, respectively ---------------------------------------------------
# Replace "<<85" and "<<29.8" with "85" (Replacing both with the lower-limit cut-off of 85)
new_mp1p_dat$Mp1p_num[which(new_mp1p_dat$Mp1p_num %in% c("<<85", "<<29.8"))] <- "85"
# Replace any character values that represent being above the 1,651,036.15 detection limit with this value limit
new_mp1p_dat$Mp1p_num[which(new_mp1p_dat$Mp1p_num %in% c(">>1,651,036.15", ">>1651036.15", "abovethecut-off", ">>1651036"))] <- "1651036.15"
# Make Mp1p_conc_clean1 numeric
new_mp1p_dat$Mp1p_num = as.numeric(new_mp1p_dat$Mp1p_num)
# Replace any values that are numerically < 85 or > 1651036.15 with 85 and 1651036.15, respectively
# new_mp1p_dat$Mp1p_num[which(new_mp1p_dat$Mp1p_num %in% c(85, 29.8)] <- 85
new_mp1p_dat$Mp1p_num[which(new_mp1p_dat$Mp1p_num < 85)] <- 85
new_mp1p_dat$Mp1p_num[which(new_mp1p_dat$Mp1p_num > 1651036.15)] <- 1651036.15
# Data Check: check that values were replaced correctly in Mp1p_num variable above
# table(new_mp1p_dat$Mp1p_char, new_mp1p_dat$Mp1p_num, exclude = NULL)
# Check which patients have missing Mp1p values
# new_mp1p_dat$PatientNo[which(is.na(new_mp1p_dat$Mp1p_num))]
# Remove missing Mp1p values
new_mp1p_dat = new_mp1p_dat %>%
filter(!is.na(Mp1p_num)) # 1590 - 29 = 1561
# 29 instances of missing mp1p values at time = 1 and day = 1 were removed
# Notes about Missing Mp1p
###################################################################################
# The 29 missing values are the patients who have a missing value mp1p value at time 1 and day 1, but 4 of these patients have mp1p values at other times and days so they were not excluded at those other times and days (Run code below). Therefore, we didn't removed these patients. Only 25 patients were removed entirely from new_mp1p_dat
# 4 patients not removed: 20-131, 20-107, 26-007, 26-013
###################################################################################
# Examining patients 20-131, 20-107, 26-007, 26-013
# new_mp1p_dat %>% filter(PatientNo == "20-131" | PatientNo == "20-107" | PatientNo == "26-007" | PatientNo == "26-013")
# Extracting the first Mp1p measurements for each patient to create a subset of "baseline" Mp1p concentrations
new_mp1p_dat_bl = new_mp1p_dat %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_num) %>% # subsetting
dplyr::group_by(PatientNo) %>% # grouping by PatientNo so that the first obs. of each person can be filtered below
dplyr::filter(row_number() == 1) %>% # get the first obs. for each person
dplyr::mutate(logMp1p = log10(Mp1p_num)) %>%  # create log base 10 transformed Mp1p
dplyr::filter(Mp1p_day < 56) # Excluding patients with a first Mp1p measurement on day 56 or later
## Merge datasets with one row per patient - base_demohist, pop_dat, base_lab, and endpoint_dat
# Merge datasets containing covariates and 2 week and 24 all-cause mortality
randomized_pop = list(base_demohist, pop_dat, base_lab, endpoint_dat) %>%
reduce(full_join, by = "PatientNo") # All 440 individuals randomized to a treatment arm with baseline demographics and all-cause mortality values
# Merging dataset of baseline demographics and all-cause mortality values with the Mp1p baseline data
# Note: This merge keeps all observations from the two datasets
new_merged_dat = merge(randomized_pop, new_mp1p_dat_bl, by = "PatientNo", all = TRUE)
new_final_dat = new_merged_dat %>%
filter(!is.na(logMp1p)) # 440 - 29 = 411
# This filter line excludes the individuals with a first Mp1p measurement taken on day 56, or later because they did not experience the primary outcome
# Convert 2 week death status variable from binary to factor
new_final_dat$evdeath_2w = factor(ifelse(new_final_dat$evdeath_2w == 1, "Death", "No Death"))
# Convert 24 week death status variable from binary to factor
new_final_dat$evdeath_24w = factor(ifelse(new_final_dat$evdeath_24w == 1, "Death", "No Death"))
# Make a 3 group Mp1p variable from Mp1p_num
new_final_dat$mp1p_3cat = ifelse(new_final_dat$Mp1p_num == 85, "Low UD", ifelse(new_final_dat$Mp1p_num > 85 & new_final_dat$Mp1p_num < 1651036.15, "Meas", "High UD"))
# Check that groups for mp1p_3cat are correct
# table(new_final_dat$Mp1p_conc_clean2, new_final_dat$mp1p_3cat, exclude = NULL)
# Make 2 group Mp1p variable from Mp1p_num: any mp1p values equal to or above the 75th percentile are "High" and any mp1p less than the 75th percentile are "Low"
new_final_dat$mp1p_2cat = cut(new_final_dat$Mp1p_num, quantile(new_final_dat$Mp1p_num, probs = c(0, 0.75, 1), na.rm = TRUE), include = TRUE, right = FALSE)
# Check that groups for mp1p_2cat are correct
# addmargins(table(new_final_dat$Mp1p_num, new_final_dat$mp1p_2cat, exclude = NULL))
# Log10 version of 2 group Mp1p variable
new_final_dat$logmp1p_2cat = cut(new_final_dat$logMp1p, quantile(new_final_dat$logMp1p, probs = c(0, 0.75, 1)), include = TRUE, right = FALSE, labels = c("Low (< 5.36 pg/mL)", "High (>= 5.36 pg/mL)"))
# Get number of Mp1p_days values for each individual (how many days Mp1p was measured for each individual)
Mp1pdays_by_patient = new_mp1p_dat %>%
group_by(PatientNo) %>%
summarize(n = n())
# Find the number of deaths among those with Mp1p data and among those without Mp1p data
MID = unique(new_mp1p_dat$PatientNo) # all individuals with Mp1p data (Mp1p IDs)
ITT = unique(pop_dat$PatientNo[which(pop_dat$itt==1)]) # all individuals in the intention-to-treat pop
DTH = endpoint_dat %>% dplyr::select(PatientNo, evdeath_24w)
# Make a binary indicator for whether someone had mp1p data among those who died
DTH$inMP1P = 0
DTH$inMP1P[which(DTH$PatientNo %in% MID)] = 1
# Make a binary indicator for whether someone is in ITT pop
DTH$inITT = 0
DTH$inITT[which(DTH$PatientNo %in% ITT)] = 1
# Cross tab of counts for indicator of death and indicator of having Mp1p data
death_mp1p_crosstab = addmargins(table(DTH$inMP1P, DTH$evdeath_24w, exclude = NULL))
row.names(death_mp1p_crosstab)[1] = "No Mp1p"
row.names(death_mp1p_crosstab)[2] = "Yes Mp1p"
colnames(death_mp1p_crosstab)[1] = "Alive"
colnames(death_mp1p_crosstab)[2] = "Dead"
# Cleaned cross tab of 24 week death by Mp1p status
kable(death_mp1p_crosstab, caption = "Mp1p Status by 24 Week Death Status")
# DTH %>% count(inMP1P, evdeath_24w)
DTH %>% count(inITT, inMP1P, evdeath_24w)
## Examining how many days for which Mp1p was measured for each patient
# The first Mp1p measurements for each individual where all day 0's, day 1's, day 2's, ... etc are each grouped together
first_mp1p = new_mp1p_dat %>%
group_by(PatientNo) %>%
arrange(Mp1p_day) %>%
filter(row_number() == 1)
# Table of the first observation days of all patients - Not all were done on day 0 or day 1
first_mp1p_df = as.data.frame(table(first_mp1p$Mp1p_day))
colnames(first_mp1p_df) = c("Day of 1st Mp1p Value", "Count")
kable(first_mp1p_df)
# first_mp1p_counts = kable(t(first_mp1p_df)) %>% kableExtra::kable_material("striped")
# Barplot of percentages for each first day measured - base R
# first_day_percents = as.data.frame(prop.table(table(mp1p_dat_bl$Mp1p_days)))
#
barplot(prop.table(table(new_mp1p_dat_bl$Mp1p_day)), xlab = "First day of Mp1p Testing", ylab = "Percentage", main = "Percentage of First Day of Mp1p Testing", ylim = c(0, 1))
# Scatterplot of log10 baseline Mp1p vs. log10 baseline fungal count
BLMp1p_BLFungal = new_final_dat %>%
ggplot(aes(x = logMp1p, y = log10_fungal_count_bl)) + geom_point(size = 1.5, color = "#00539B") +
geom_smooth(method = "loess", color = "#262626") +
# theme(axis.text=element_text(size=22),
#       axis.title=element_text(size=24),
#       plot.title = element_text(size=26)) +
xlab("log10 Mp1p (pg/mL)") +
ylab("log10 Fungal Count (CFU/mL)") +
theme_bw() +
ggtitle("Mp1p Concentrations vs. Fungal Count (At Baseline)")
print(BLMp1p_BLFungal)
# Compute correlation value and 95% CI for a correlation between Mp1p and fungal count
mp1p_fungal_cortest = cor.test(new_final_dat$logMp1p, new_final_dat$log10_fungal_count_bl, digits = 2, method = "spearman")
mp1p_fungal_cortest
CIs = round(exp(confint(mp1p_fungal_cortest)), 2) # 95% CIs on response scale rounded
CIs = round(exp(confint(mp1p_fungal_cortest)), 2) # 95% CIs on response scale rounded
confint(mp1p_fungal_cortest)
# Compute correlation value and 95% CI for a correlation between Mp1p and fungal count
mp1p_fungal_cortest = cor.test(new_final_dat$logMp1p, new_final_dat$log10_fungal_count_bl, digits = 2, method = "spearman")
mp1p_fungal_cortest
# CIs = round(exp(confint(mp1p_fungal_cortest)), 2) # 95% CIs on response scale,  rounded
# side-by-side plot
(ivdu_boxplot + ivdu_density)/(ivdu_hist_no + ivdu_hist_yes)
# Density plot of CD4 at baseline
new_final_dat %>%
ggplot(aes(cd4_bl)) + geom_density(size = 2) +
# theme(axis.text=element_text(size=22),
#       axis.title=element_text(size=24),
#       plot.title = element_text(size=26)) +
xlab("Baseline CD4 Count (#cells/microliter of blood)") +
ylab("Density") +
ggtitle("Density of CD4 Count at Baseline")
# Boxplot of log Mp1p by all-cause death at 24 weeks
evdeath24w_boxplot = new_final_dat %>%
ggplot(aes(x = evdeath_24w, y = logMp1p, fill = evdeath_24w)) + geom_boxplot(size = 0.8) +
# theme(axis.text=element_text(size=22),
#       axis.title=element_text(size=24),
#       plot.title = element_text(size=26),
#       legend.title = element_text(size=24),
#       legend.text = element_text(size=22)) +
labs(fill = "Death Status") +
xlab("") +
ylab("log10 Mp1p (pg/mL)") +
ggtitle("Mp1p Concentrations by 24 Week All-Cause Death Status")
# Overlapping density of log Mp1p by all-cause death at 24 weeks
evdeath24w_density = new_final_dat %>%
ggplot(aes(x = logMp1p, color = evdeath_24w)) + geom_density(alpha = 0.5, size = 2) +
# theme(axis.text=element_text(size=22),
#       axis.title=element_text(size=24),
#       plot.title = element_text(size=26),
#       legend.title = element_text(size=24),
#       legend.text = element_text(size=22)) +
labs(color = "Death Status") +
xlab("log10 Mp1p (pg/mL)") +
ylab("Density") +
ggtitle("Density of Mp1p by 24 Week All-Cause Death Status")
# Histogram of log Mp1pfor all-cause death at 2 weeks - NO DEATH
evdeath24w_hist_NoDeath = new_final_dat %>%
filter(evdeath_24w == "No Death") %>%
ggplot(aes(x = logMp1p)) + geom_histogram(color = "black", fill = "coral1") +
# theme(axis.text=element_text(size=22),
#       axis.title=element_text(size=24),
#       plot.title = element_text(size=26),
#       legend.title = element_text(size=24),
#       legend.text = element_text(size=22)) +
ylim(0, 40) +
xlab("log10 Mp1p (pg/mL)") +
ggtitle("Mp1p Concentrations by No Death at 24 Weeks")
# Histogram of log Mp1pfor all-cause death at 2 weeks - DEATH
evdeath24w_hist_Death = new_final_dat %>%
filter(evdeath_24w == "Death") %>%
ggplot(aes(x = logMp1p)) + geom_histogram(color = "black", fill = "cyan3") +
# theme(axis.text=element_text(size=22),
#       axis.title=element_text(size=24),
#       plot.title = element_text(size=26),
#       legend.title = element_text(size=24),
#       legend.text = element_text(size=22)) +
ylim(0, 40) +
xlab("log10 Mp1p (pg/mL)") +
ggtitle("Mp1p Concentrations by Death at 24 Weeks")
# side-by-side plots
(evdeath24w_boxplot + evdeath24w_density)/(evdeath24w_hist_NoDeath + evdeath24w_hist_Death)
# source("TableOne_Function_byTina.R")
#
# ord <- data.frame(var=c("age", "sex", "arm", "ivdu", "cd4_bl", "log10_fungal_count_bl", "evdeath_2w", "evdeath_24w"), flag=c(0,1,1,1,0,0,1,1))
#
# # All data to put into Table 1
# Table1Data = new_final_dat %>%
#    select(arm, sex, age, ivdu, cd4_bl, evdeath_2w, evdeath_24w, mp1p_3cat, log10_fungal_count_bl)
#
# # Combining all Table data
# Tbl1.2 = MkTblNew(Table1Data, ArmInd="mp1p_3cat", ord=ord, NP=TRUE, na=TRUE)
#
# # Rename columns for Mp1p groups
# # names(Tbl1.2)[2] = "Low UD"
# # names(Tbl1.2)[3] = "Meas"
# # names(Tbl1.2)[4] = "High UD"
#
# # Format the Table 1 using kable
# kable(Tbl1.2, caption = "Baseline Characteristics by Detectable Mp1p Level") # with p-values
# kable(Tbl1.2[,-ncol(Tbl1.2)]) # without p-values
# source("TableOne_Function_byTina.R")
# ord <- data.frame(var=c("age", "sex", "arm", "ivdu", "cd4_bl", "log10_fungal_count_bl", "evdeath_2w", "evdeath_24w"), flag=c(0,1,1,1,0,0,1,1))
#
# # All data to put into Table 1
# Table1Data = new_final_dat %>%
#    select(arm, sex, age, ivdu, cd4_bl, evdeath_2w, evdeath_24w, logmp1p_2cat, log10_fungal_count_bl)
#
# # Combining all Table data
# Tbl1.3 = MkTblNew(Table1Data, ArmInd="logmp1p_2cat", ord=ord, NP=TRUE, na=TRUE)
#
# # Format the Table 1 using kable
# kable(Tbl1.3, caption = "Baseline Characteristics by Mp1p Level (75th Percentile)") # with p-values
myVars = c("arm", "sex", "age", "cd4_bl", "ivdu", "log10_fungal_count_bl", "evdeath_24w", "evtypeirisrelapse_24w")
catVars = c("arm", "sex", "ivdu", "evdeath_24w", "evtypeirisrelapse_24w")
tab1 = CreateTableOne(vars = myVars, strata = "logmp1p_2cat", factorVars = catVars, data = new_final_dat, addOverall = TRUE)
Table1 = print(tab1, nonnormal = c("arm", "sex", "age", "cd4_bl", "ivdu", "log10_fungal_count_bl", "evdeath_24w", "evtypeirisrelapse_24w"), formatOptions = list(big.mark = ","))
### I temporarily added in IRIS/relase status into the new_final_dat for Aim 1 in order to produce a table 1 with IRIS/relapse and all-cause death, along with mp1p and corvariates -- Need to figure out how to do this combined table 1 more efficiently ###
rownames(Table1) = c("n", "Arm = Itraconazole (%)", "Sex = Male (%)", "Age (median [IQR])", "CD4 Count (cells/microliter) (median [IQR])", "Hx of IV drug use = Yes (%)", "Fungal Count (CFUs/ml) (median [IQR])", "Mortality at 24 wks")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message = FALSE)
######################################################################
##  Author: tina.davenport@duke.edu
##  Program: SAPRrmdtemplate.rmd
##  Purpose: This program drafts and executes the SAP for a project
##  Input files:  [list data or source files]
##  Output files: SAPRrmdtemplate.docx - Word file of the SAP and report for these analyses
##  Change Log:       (example)
##  02/24/2022 File started
##  02/05/2022 Updated SAP based on feedback from PI
######################################################################
# setwd()
library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
myVars = c("arm", "sex", "age", "cd4_bl", "ivdu", "log10_fungal_count_bl", "evdeath_24w", "evtypeirisrelapse_24w")
catVars = c("arm", "sex", "ivdu", "evdeath_24w", "evtypeirisrelapse_24w")
tab1 = CreateTableOne(vars = myVars, strata = "logmp1p_2cat", factorVars = catVars, data = new_final_dat, addOverall = TRUE)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message = FALSE)
######################################################################
##  Author: tina.davenport@duke.edu
##  Program: SAPRrmdtemplate.rmd
##  Purpose: This program drafts and executes the SAP for a project
##  Input files:  [list data or source files]
##  Output files: SAPRrmdtemplate.docx - Word file of the SAP and report for these analyses
##  Change Log:       (example)
##  02/24/2022 File started
##  02/05/2022 Updated SAP based on feedback from PI
######################################################################
# setwd()
library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
# Baseline demographics and symptoms
base_demohist = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_DEMOHIST.csv") %>%
dplyr::select(patientno, age, sex, ivdu) %>%
dplyr::rename(PatientNo = patientno) # renaming patientno variable
# Baseline lab measurements (including baseline cd4 and fungal count)
base_lab = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_LAB.csv") %>%
dplyr::select(PatientNo, cd4_bl, log10_fungal_count_bl)
# Dataset containing treatment arm
pop_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/POP.csv") %>%
dplyr::select(PatientNo, arm, itt, itt_mod, pp)
# Endpoint dataset
endpoint_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttdeath_2w, evdeath_2w, ttdeath_24w, evdeath_24w, ttirisrelapse_24w, evtypeirisrelapse_24w)
# Endpoint dataset for Aim 3 (Only contains PatientNo and outcome variables for composite of IRIS and relapse)
endpoint_dat_aim3 = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttirisrelapse_24w, evtypeirisrelapse_24w, evtypeirisrelapse_text_24w, evtypeirisrelapse_textdetail_24w, irisrelapse_date)
# Fungal dataset - renaming "patientno" as "PatientNo"
fungal_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/FUNGAL.csv", header = TRUE) %>%
dplyr::rename(PatientNo = patientno)
# New Mp1p dataset - contains 20 new Mp1p values added as of 08/03/2022 and the 32 new values added as of 07/26/2022 which were all missing previously
new_mp1p_dat = read_excel("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/TmAg clearance 20220803.xlsx", sheet = "TmAg", na = "") %>%
data.frame() %>%
dplyr::rename(Mp1p_char = Mp1p.concentration..pg.ml.) %>% # renaming variables
dplyr::rename(Mp1p_day = day) %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_char, Reason.for.NA.TmAg) %>% # subsetting
dplyr::arrange(PatientNo, Mp1p_day, time) # arrange PatientNo by day and time so that day and time are in ascending order
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message = FALSE)
######################################################################
##  Author: tina.davenport@duke.edu
##  Program: SAPRrmdtemplate.rmd
##  Purpose: This program drafts and executes the SAP for a project
##  Input files:  [list data or source files]
##  Output files: SAPRrmdtemplate.docx - Word file of the SAP and report for these analyses
##  Change Log:       (example)
##  02/24/2022 File started
##  02/05/2022 Updated SAP based on feedback from PI
######################################################################
# setwd()
library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
### -- Grace ----------------------------------------------
# rm(list = ls()) # Clear environment
### Packages ###
library(knitr)
library(kableExtra)
library(readxl)
library(proto)
library(gsubfn)
library(patchwork)
library(lintr)
library(scales)
library(stats)
library(survival)
library(survminer)
library(tikzDevice)
library(GGally)
library(car)
library(heatmapFit)
library(cowplot)
#library(table1)
library(tableone)
library(vioplot)
library(cmprsk)
library(tidyverse)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message = FALSE)
######################################################################
##  Author: tina.davenport@duke.edu
##  Program: SAPRrmdtemplate.rmd
##  Purpose: This program drafts and executes the SAP for a project
##  Input files:  [list data or source files]
##  Output files: SAPRrmdtemplate.docx - Word file of the SAP and report for these analyses
##  Change Log:       (example)
##  02/24/2022 File started
##  02/05/2022 Updated SAP based on feedback from PI
######################################################################
# setwd()
library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
# Baseline demographics and symptoms
base_demohist = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_DEMOHIST.csv") %>%
dplyr::select(patientno, age, sex, ivdu) %>%
dplyr::rename(PatientNo = patientno) # renaming patientno variable
# Baseline lab measurements (including baseline cd4 and fungal count)
base_lab = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/BASE_LAB.csv") %>%
dplyr::select(PatientNo, cd4_bl, log10_fungal_count_bl)
# Dataset containing treatment arm
pop_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/POP.csv") %>%
dplyr::select(PatientNo, arm, itt, itt_mod, pp)
# Endpoint dataset
endpoint_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttdeath_2w, evdeath_2w, ttdeath_24w, evdeath_24w, ttirisrelapse_24w, evtypeirisrelapse_24w)
# Endpoint dataset for Aim 3 (Only contains PatientNo and outcome variables for composite of IRIS and relapse)
endpoint_dat_aim3 = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/ENDPOINT.csv") %>%
dplyr::select(PatientNo, ttirisrelapse_24w, evtypeirisrelapse_24w, evtypeirisrelapse_text_24w, evtypeirisrelapse_textdetail_24w, irisrelapse_date)
# Fungal dataset - renaming "patientno" as "PatientNo"
fungal_dat = read.csv("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/FUNGAL.csv", header = TRUE) %>%
dplyr::rename(PatientNo = patientno)
# New Mp1p dataset - contains 20 new Mp1p values added as of 08/03/2022 and the 32 new values added as of 07/26/2022 which were all missing previously
new_mp1p_dat = read_excel("/Users/KovicFamily/Library/CloudStorage/Box-Box/R25_2022_Le_Kovic/Data/TmAg clearance 20220803.xlsx", sheet = "TmAg", na = "") %>%
data.frame() %>%
dplyr::rename(Mp1p_char = Mp1p.concentration..pg.ml.) %>% # renaming variables
dplyr::rename(Mp1p_day = day) %>%
dplyr::select(PatientNo, Mp1p_day, time, Mp1p_char, Reason.for.NA.TmAg) %>% # subsetting
dplyr::arrange(PatientNo, Mp1p_day, time) # arrange PatientNo by day and time so that day and time are in ascending order
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message = FALSE)
######################################################################
##  Author: tina.davenport@duke.edu
##  Program: SAPRrmdtemplate.rmd
##  Purpose: This program drafts and executes the SAP for a project
##  Input files:  [list data or source files]
##  Output files: SAPRrmdtemplate.docx - Word file of the SAP and report for these analyses
##  Change Log:       (example)
##  02/24/2022 File started
##  02/05/2022 Updated SAP based on feedback from PI
######################################################################
# setwd()
library(tidyverse)
library(lubridate)
library(knitr)
options(knitr.kable.NA="")
options(max.print = .Machine$integer.max)  # don't limit console printing
rm(list=ls())
