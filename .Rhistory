missing_cols[, -ncol(data)]
ncol(data)
missing_cols[171]
ncol(data)
missing_cols[, 171]
missing_cols
missing_cols[, 170]
missing_cols[170]
ncol(data)
missing_cols[-ncol(missing_cols)]
missing_cols[ncol(missing_cols)]
ncol(missing_cols)
missing_cols
length(missing_cols)
missing_cols[-length(missing_cols)]
# Remove outcome from missing cols
missing_cols = missing_cols[-length(missing_cols)]
# Copy dataset
clean_data = data
# Copy dataset
clean_data = data
# Iterate over missing columns
for(missing_col in missing_cols) {
# Mean imputation for survival group
clean_data[[missing_col]][is.na(data[[missing_col]]) & data$outcome == 0] =
mean(data[[missing_col]][data$outcome == 0], na.rm = TRUE)
# Mean imputation for non-survival group
clean_data[[missing_col]][is.na(data[[missing_col]]) & data$outcome == 1] =
mean(data[[missing_col]][data$outcome == 1], na.rm = TRUE)
}
# Remove row with NA outcome
clean_data = clean_data[!is.na(clean_data$outcome)]
clean_data
# Get number of NAs per variable
na_table_new  = sapply(clean_data, function(y) sum(length(which(is.na(y)))))
na_table_new
# Copy dataset
clean_data = data
data %>%
group_by(subjid) %>%
tidyr::fill(missing_cols, .direction = c("updown"))
clean_data <- data %>%
group_by(subjid) %>%
tidyr::fill(missing_cols, .direction = c("updown"))
# Remove row with NA outcome
clean_data = clean_data[!is.na(clean_data$outcome)]
clean_data
# Get number of NAs per variable
na_table  = sapply(data, function(y) sum(length(which(is.na(y)))))
# Filter table to only include variables with NA
na_table = na_table[na_table > 0]
# na_table
# Get columns with missing data
missing_cols = names(na_table)
# missing_cols
# Remove Extra Index Variable X
missing_cols = missing_cols[-1]
# Remove outcome from missing cols
missing_cols = missing_cols[-length(missing_cols)]
# missing_cols
missing_cols
data %>%
group_by(subjid) %>%
tidyr::fill(missing_cols, .direction = c("updown"))
clean_data[!is.na(clean_data$outcome)]
!is.na(clean_data$outcome)
clean_data
clean_data[!is.na(clean_data$In.hospital_death)]
!is.na(clean_data$In.hospital_death)
clean_data[!is.na(clean_data$In.hospital_death)]
!is.na(clean_data$In.hospital_death)
is.na(clean_data$In.hospital_death)
clean_data[!is.na(clean_data$In.hospital_death)]
clean_data[, !is.na(clean_data$In.hospital_death)]
clean_data[!is.na(clean_data$In.hospital_death),]
# Remove row with NA outcome
clean_data = clean_data[!is.na(clean_data$In.hospital_death),]
is.na(clean_data$In.hospital_death)
sum(length(is.na(clean_data$In.hospital_death)))
sum(length(!is.na(clean_data$In.hospital_death)))
clean_data$In.hospital_death
# Get number of NAs per variable
na_table_new  = sapply(clean_data, function(y) sum(length(which(is.na(y)))))
na_table_new
str(clean_data)
clean_data %>%
select(-contains("Mech_Vent"))
clean_data %>%
select(-contains("Mech_Vent", "Gender", "ICUType"))
clean_data %>%
select(-contains(c("Mech_Vent", "Gender", "ICUType")))
clean_data %>%
select(-contains(c("MechVent", "Gender", "ICUType")))
clean_data %>%
select(-contains(c("MechVent", "Gender", "ICUType")))
clean_data %>%
select(-contains(c("MechVent", "Gender", "ICUType")), - X)
# De-select non-continuous variables
cont_data = clean_data %>%
select(-contains(c("MechVent", "Gender", "ICUType")), - X)
head(cont_data)
summary(cont_data)
nrow(cont_data)
ncol(cont_data)
pr.out=prcomp(cont_data, scale=TRUE)
pr.out=prcomp(cont_data, scale=TRUE, na.action = na.omit)
cont_data %>%  mutate_all(~replace(., is.na(.), -1))
cont_data <- cont_data %>%  mutate_all(~replace(., is.na(.), -1))
pr.out=prcomp(cont_data, scale=TRUE)
names(pr.out)
pr.out$center
pr.out$scale^2
pr.out$rotation[,1:2]
ncol(pr.out$rotation)
dim(pr.out$x)
pr.out$x[1:20,1:2]
fviz_pca_biplot(pr.out, repel = TRUE, label = "var", select.var = list(contrib = 4), arrowsize = 0.75, alpha.ind = 0.1, col.var = "blue",title = "PCA Biplot with top 4 contributing variables")
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type='b')
cont_data %>% na.omit()
# De-select non-continuous variables
cont_data = clean_data %>%
select(-contains(c("MechVent", "Gender", "ICUType")), - X)
cont_data %>% na.omit()
nrow(cont_data)
ncol(cont_data)
cont_data <- cont_data %>%  mutate_all(~replace(., is.na(.), -1))
pr.out=prcomp(cont_data, scale=TRUE)
pr.out$x
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(magrittr)
library(lme4)
library(flextable)
library(DataExplorer)
mean_train <- read.csv("mean_train_frame.csv")
mean_test <- read.csv("mean_test_frame.csv")
results <- glmer(in_hosp_death ~ ALP + ALT + AST + Age + Albumin + BUN + (1 + Interval | subjid),family = binomial, data = mean_train, na.action = na.omit)
mean_train
results <- glmer(in_hosp_death ~ Age + BUN + (1 + Interval | subjid),family = binomial, data = mean_train, na.action = na.omit)
summary(results)
mean_train
glmer(in_hosp_death ~ Age + BUN + (1 + Interval | subjid),family = binomial, data = mean_train, na.action = na.omit)
summary(results)
prediction <- predict(results, mean_test, type = "response")
prediction <- predict(results, mean_test, type = "response", allow.new.levels = TRUE)
library(pROC)
mean_train
pred <- prediction(predict(results)$posterior[,2], mean_train$in_hosp_death)
library(ROCR)
install.packages("ROCR")
library(ROCR)
pred <- prediction(predict(results)$posterior[,2], mean_train$in_hosp_death)
predict(results)$posterior[,2]
predict(results)$posterior
predict(results)
pred <- prediction(predict(results), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
auc(roc(mean_test$in_hosp_death, as.numeric(prediction$class)))
as.numeric(prediction$class))
prediction
auc(roc(mean_test$in_hosp_death, as.numeric(prediction)))
prediction <- predict(results, mean_test, type = "response", allow.new.levels = TRUE)
# auc(roc(mean_test$in_hosp_death, as.numeric(prediction)))
auc <- 0.7558
pred <- prediction(predict(results), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
pred
performance(pred,"tpr","fpr")
AUC
pred <- prediction(predict(results), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
perf
summary(perf)
prediction <- predict(results, mean_test, type = "response", allow.new.levels = TRUE)
# auc(roc(mean_test$in_hosp_death, as.numeric(prediction)))
auc <- 0.7558
pred <- prediction(predict(results), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
auc <- 0.7558
pred <- prediction(predict(results), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
auc(roc(mean_test$in_hosp_death, as.numeric(prediction)))
predict(results)
results <- glmer(in_hosp_death ~ Age + BUN + (1 + Interval | subjid),family = binomial(link = "logit"), data = mean_train, na.action = na.omit)
summary(results)
exp(predict(results))
prediction <- predict(results, mean_test, type = "response", allow.new.levels = TRUE)
# auc(roc(mean_test$in_hosp_death, as.numeric(prediction)))
auc <- 0.7558
pred <- prediction(exp(predict(results)), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
results
prediction
prediction <- predict(results, mean_test, type = "response", allow.new.levels = TRUE)
auc(roc(mean_test$in_hosp_death, as.numeric(prediction)))
auc(roc(mean_test$in_hosp_death, exp(prediction)))
pred
pred <- prediction(exp(predict(results)), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
performance(pred,"tpr","fpr")
exp(predict(results))
in_hosp_death
results <- glmer(as.factor(in_hosp_death) ~ Age + BUN + (1 + Interval | subjid),family = binomial(link = "logit"), data = mean_train, na.action = na.omit)
summary(results)
summary(results)
hist(predict(results))
hist(exp(predict(results)))
pred <- prediction(exp(predict(results)), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
mean_train$in_hosp_death
aucpr <- performance(pred,measure = "aucpr")
auc_PR <- aucpr@y.values[[1]]
auc_PR
aucpr
auc_PR
# Training
train_df <- read.csv("train.csv")
# Testing
test_df <- read.csv("test.csv")
train_glimpse <- train_df %>% ff_glimpse()
test_glimpse <- test_df %>%  ff_glimpse()
train_glimpse$Continuous %>%
dplyr::select(-var_type, -n, -quartile_25, -quartile_75) %>%
arrange(desc(missing_percent)) %>%
flextable() %>%
autofit() %>%
set_caption("Continuous Missing Value Table")
# train_glimpse$Categorical
# str(train_df)
### Training Data Subsetting
variables_kept <- train_glimpse$Continuous %>%
filter(as.numeric(missing_percent) <= 50.0) %>% rownames()
### Add time variable back in , only run once
variables_kept <- c(variables_kept, "Time")
variables_thrown <- train_glimpse$Continuous %>%
filter(as.numeric(missing_percent) > 50.0) %>%  rownames()
#### Test Data Subsetting
variables_kept_test <- test_glimpse$Continuous %>%
filter(as.numeric(missing_percent) <= 50.0) %>% rownames()
### Add time variable back in
variables_kept_test <- c(variables_kept_test, "Time")
variables_thrown_test <- test_glimpse$Continuous %>%
filter(as.numeric(missing_percent) > 50.0) %>%  rownames()
### Check that we kept the same variables across sets
#variables_kept == variables_kept_test
### Subset data based on missingness
subset_train <- train_df[variables_kept]
subset_test <- test_df[variables_kept]
variables_kept
data
data
data <- rbind(train, test)
train <- read.csv("train_recode.csv")
test <- read.csv("test_recode.csv")
data <- rbind(train, test)
data
data %>%  select(contain(variables_kept))
data %>%  select(contains(variables_kept))
variables_thrown
data <- data %>%  select(contains(variables_kept))
# Get number of NAs per variable
na_table  = sapply(data, function(y) sum(length(which(is.na(y)))))
# Filter table to only include variables with NA
na_table = na_table[na_table > 0]
# na_table
# Get columns with missing data
missing_cols = names(na_table)
# missing_cols
# Remove Extra Index Variable X
missing_cols = missing_cols[-1]
# Remove outcome from missing cols
missing_cols = missing_cols[-length(missing_cols)]
# missing_cols
missing_cols
# Copy dataset
clean_data = data
# Iterate over missing columns
# for(missing_col in missing_cols) {
#   # Mean imputation for survival group
#   clean_data[[missing_col]][is.na(data[[missing_col]]) & data$outcome == 0] =
#     mean(data[[missing_col]][data$outcome == 0], na.rm = TRUE)
#
#   # Mean imputation for non-survival group
#   clean_data[[missing_col]][is.na(data[[missing_col]]) & data$outcome == 1] =
#     mean(data[[missing_col]][data$outcome == 1], na.rm = TRUE)
# }
clean_data <- data %>%
group_by(subjid) %>%
tidyr::fill(missing_cols, .direction = c("updown"))
# Remove row with NA outcome
clean_data = clean_data[!is.na(clean_data$In.hospital_death),]
!is.na(clean_data$In.hospital_death)
is.na(clean_data$In.hospital_death)
clean_data
# Get number of NAs per variable
na_table_new  = sapply(clean_data, function(y) sum(length(which(is.na(y)))))
na_table_new
# De-select non-continuous variables
cont_data = clean_data %>%
select(-contains(c("MechVent", "Gender", "ICUType")), - X)
cont_data <- cont_data %>%  mutate_all(~replace(., is.na(.), -1))
pr.out=prcomp(cont_data, scale=TRUE)
pr.out$rotation[,1:2]
cont_data
cont_data[2:117]
cont_data <- cont_data %>%  mutate_all(~replace(., is.na(.), -1))
pr.out=prcomp(cont_data[2:117], scale=TRUE)
pr.out$rotation[,1:2]
fviz_pca_biplot(pr.out, repel = TRUE, label = "var", select.var = list(contrib = 4), arrowsize = 0.75, alpha.ind = 0.1, col.var = "blue",title = "PCA Biplot with top 4 contributing variables")
variables_kept
pve=pr.var/sum(pr.var)
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained ", ylim=c(0,1),type='b')
plot(cumsum(pve), xlab="Principal Component ", ylab=" Cumulative Proportion of Variance Explained ", ylim=c(0,1), type='b')
mean_train_data <- read.csv("mean_train_frame.csv")
mean_train_data
mean_train_data[4:36]
pr_comp_mean <- prcomp(mean_train_data[4:36])
summary(pr_comp_mean)
screeplot(pr_comp_mean,
main = "Principal Component Variances for Averaged Features",
type = "lines")
var_explained = pr_comp_mean$sdev^2 / sum(pr_comp_mean$sdev^2)
prop_plot <- qplot(c(1:30),var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Proportion Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1) +
theme_bw() +
scale_x_continuous(breaks = seq(1,30, by = 1))
cumulative_prop <- summary(pr_comp_mean)$importance[c(seq(3,90, by = 3))]
cum_plot <- qplot(y = cumulative_prop) +
geom_line() +
xlab("Principal Component") +
ylab("Cumulative Prop. Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1) +
theme_bw()
cum_plot <- cum_plot +
geom_hline(yintercept = 0.88, color = "red", linetype = "dashed") +
geom_hline(yintercept = 0.95, color = "blue", linetype = "dashed") +
scale_x_continuous(breaks = seq(1,30, by = 1))
prop_plot + cum_plot
library(pathwork)
install.packages("patchwork")
library(pathwork)
library(patchwork)
prop_plot + cum_plot
prop_plot
var_explained
prop_plot <- qplot(c(1:33),var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Proportion Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1) +
theme_bw() +
scale_x_continuous(breaks = seq(1,30, by = 1))
prop_plot
prop_plot <- qplot(c(1:33),var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Proportion Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1) +
theme_bw() +
scale_x_continuous(breaks = seq(1,33, by = 1))
cumulative_prop <- summary(pr_comp_mean)$importance[c(seq(3,90, by = 3))]
cum_plot <- qplot(y = cumulative_prop) +
geom_line() +
xlab("Principal Component") +
ylab("Cumulative Prop. Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1) +
theme_bw()
cum_plot <- cum_plot +
geom_hline(yintercept = 0.88, color = "red", linetype = "dashed") +
geom_hline(yintercept = 0.95, color = "blue", linetype = "dashed") +
scale_x_continuous(breaks = seq(1,30, by = 1))
prop_plot + cum_plot
library(patchwork)
prop_plot + cum_plot
prop_plot + cum_plot
prop_plot + cum_plot
cum_plot <- cum_plot +
geom_hline(yintercept = 0.88, color = "red", linetype = "dashed") +
geom_hline(yintercept = 0.95, color = "blue", linetype = "dashed") +
scale_x_continuous(breaks = seq(1,33, by = 1))
fviz_pca_biplot(pr_comp_mean, repel = TRUE, label = "var", select.var = list(contrib = 4), arrowsize = 0.75, alpha.ind = 0.1, col.var = "blue",title = "PCA Biplot with top 4 contributing variables")
prop_plot + cum_plot
fviz_pca_biplot(pr_comp_mean, repel = TRUE, label = "var", select.var = list(contrib = 4), arrowsize = 0.75, alpha.ind = 0.1, col.var = "blue",title = "PCA Biplot with top 4 contributing variables")
pr_comp_mean$rotation[,1:2]
data.frame(pr_comp_mean$rotation[,1:2])
data.frame(pr_comp_mean$rotation[,1:2])[2,2]
typeof(data.frame(pr_comp_mean$rotation[,1:2])[2,2])
data.frame(pr_comp_mean$rotation[,1:2])
data.frame(abs(pr_comp_mean$rotation[,1:2]))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% arrange(desc())
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% arrange(desc(.))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% mutate(Total_PC = sum(PC1, PC2)) %>% arrange(desc(.))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% mutate(var = rownames()) %>% arrange(desc(.))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% mutate(var = rownames(.)) %>% arrange(desc(.))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% mutate(var = rownames(.), Total_PC = sum(PC1, PC2)) %>% arrange(desc(.))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% mutate(var = rownames(.), Total_PC = (PC1 +PC2)) %>% arrange(desc(.))
data.frame(abs(pr_comp_mean$rotation[,1:2])) %>% mutate(var = rownames(.), Total_PC = (PC1 +PC2)) %>% arrange(desc(Total_PC))
most_contribution <- data.frame(abs(pr_comp_mean$rotation[,1:2])) %>%
mutate(var = rownames(.), Total_PC = (PC1 +PC2)) %>%
arrange(desc(Total_PC))
head(most_contribution)
head(most_contribution, 10)
head(most_contribution)
results2 <- glmer(as.factor(in_hosp_death) ~ Platelets + Urine + PaO2 + BUN + WBC + Age + (1 + Interval | subjid),family = binomial(link = "logit"), data = mean_train, na.action = na.omit)
summary(results2)
summary(results2)
prediction2 <- predict(results2, mean_test, type = "response", allow.new.levels = TRUE)
auc(roc(mean_test$in_hosp_death, exp(prediction)))
pred <- prediction(exp(predict(results2)), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
prediction2 <- predict(results2, mean_test, type = "prob", allow.new.levels = TRUE)
prediction2 <- predict(results2, mean_test, type = "link", allow.new.levels = TRUE)
auc(roc(mean_test$in_hosp_death, exp(prediction)))
auc2 <- 0.7558
pred <- prediction(exp(predict(results2)), mean_train$in_hosp_death)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
prediction
prediction2 <- predict(results2, mean_test$in_hosp_death, allow.new.levels = TRUE)
prediction2 <- predict(results2, mean_test$in_hosp_death,type = "response",  allow.new.levels = TRUE)
prediction2 <- predict(results2, mean_test,type = "response",  allow.new.levels = TRUE)
#get sensitivy and specificity
Observation <- mean_test$in_hosp_death
Roc_ <- pROC::roc(response = Observation, predictor = prediction2)
TPR <- Roc_$sensitivities
FPR <- 1 - Roc_$specificities
AUC <- Roc_$auc[[1]]
AUC
#plot curve
ggplot()+
geom_point(aes(x = FPR , y = TPR), col = "red") +
labs(title = paste0("AUC = ", round(AUC,4))) +
scale_x_continuous(expand = c(0, 0), limits = c(0, NA)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
theme_classic()
aucpr <- performance(prediction2,measure = "aucpr")
pred2 <- prediction(exp(predict(results2)), mean_train$in_hosp_death)
perf2 <- performance(pred2,"tpr","fpr")
pred2 <- prediction(exp(predict(results2)), mean_train$in_hosp_death)
perf2 <- performance(pred2,"tpr","fpr")
plot(perf,colorize=TRUE)
abline(a=0, b= 1)
mylabel = bquote(bold(AUC) == .(format(auc, digits = 4)))
text(x = 0.65, y = 0.35, labels = mylabel)
aucpr <- performance(pred2,measure = "aucpr")
auc_PR <- aucpr@y.values[[1]]
auc_PR
aucpr2 <- performance(pred2,measure = "aucpr")
auc_PR2 <- aucpr2@y.values[[1]]
auc_PR2
aucpr2@y.values[[1]]
performance(pred2, measure = "aucpr")
aucpr2@y.values
aucpr2
aucpr2@
auc_PR2 <- aucpr2@y.values[[1]]
aucpr2 <- performance(pred2, measure = "aucpr")
auc_PR2 <- aucpr2@y.values[[1]]
performance(pred2, measure = "aucpr")
install.packages("reticulate")
library(reticulate)
head(most_contribution, 20)
reticulate::repl_python()
